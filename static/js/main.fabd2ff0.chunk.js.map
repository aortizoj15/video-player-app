{"version":3,"sources":["components/SearchBar.component.tsx","components/VideoDescription.component.tsx","components/VideoItem.component.tsx","components/VideoList.component.tsx","api/youtubeApi.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBar","state","searchTerm","handleChange","e","_this","setState","target","value","handleSubmit","onFormSubmit","props","preventDefault","react_default","a","createElement","Paper","onSubmit","this","TextField","fullWidth","label","onChange","Component","VideoDescription","_ref","video","videoSrc","concat","id","videoId","Fragment","elevation","style","height","frameBorder","width","title","src","padding","Typography","variant","snippet","channelTitle","description","VideoItem","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","thumbnails","medium","url","VideoList","videos","allVideos","map","VideoItem_component","key","container","spacing","axios","create","baseURL","params","part","maxResults","App","selectedVideo","_callee","response","regenerator_default","wrap","_context","prev","next","youtube","get","q","sent","data","items","stop","_this$state","justify","SearchBar_component","VideoDescription_component","VideoList_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fabd2ff0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Paper, TextField} from '@material-ui/core';\n\nclass SearchBar extends Component<any> {\n  state = {\n    searchTerm: '',\n  }\n\n  handleChange = (e: any) => {\n    this.setState({\n      searchTerm: e.target.value,\n    })\n  }\n\n  handleSubmit = (e: any) => {\n    const {searchTerm} = this.state;\n    const {onFormSubmit} = this.props;\n\n    onFormSubmit(searchTerm);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <Paper>\n        <form onSubmit={this.handleSubmit}>\n          <TextField fullWidth label='Search...' onChange={this.handleChange}></TextField>\n        </form>\n      </Paper>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport {Paper, Typography} from '@material-ui/core';\n\nconst VideoDescription: any = ({ video }: {video: any}) => {\n  if (!video) return <div>Loading...</div>;\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n  return (\n    <>\n      <Paper elevation={6} style={{height: '70%'}}>\n        <iframe frameBorder=\"0\" height=\"100%\" width=\"100%\" title=\"Video Player\" src={videoSrc}></iframe>\n      </Paper>\n      <Paper elevation={6} style={{padding: \"15px\"}}>\n        <Typography variant=\"h4\">{video.snippet.title} - {video.snippet.channelTitle}</Typography>\n        <Typography variant=\"subtitle1\">{video.snippet.channelTitle}</Typography>\n        <Typography variant=\"subtitle2\">{video.snippet.description}</Typography>\n      </Paper>\n    </>\n  )\n}\n\nexport default VideoDescription;\n","import React from 'react'\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\n\nconst VideoItem: any = ({video, onVideoSelect}: {video: any, onVideoSelect: any}) => {\n  const handleClick = () => {\n    return onVideoSelect(video);\n  }\n  return (\n    <Grid item xs={12}>\n      <Paper style={{display: 'flex', alignItems: 'center', cursor: 'pointer'}} onClick={handleClick}>\n        <img style={{marginRight: '20px'}} alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url}/>\n        <Typography variant=\"subtitle1\"><b>{video.snippet.title}</b></Typography>\n      </Paper>\n    </Grid>\n  )\n}\n\nexport default VideoItem;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport VideoItem from './VideoItem.component';\n\nconst VideoList: any = ({videos, onVideoSelect}: {videos: any, onVideoSelect: any}) => {\n  const allVideos = videos.map((video: any, id: any) => {\n    return <VideoItem onVideoSelect={onVideoSelect} key={id} video={video}/>\n});\n  return (\n    <Grid container spacing={2}>\n      {allVideos}\n    </Grid>\n  );\n}\n\nexport default VideoList;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n  params: {\n    part: 'snippet',\n    maxResults: 5,\n    key: 'AIzaSyBIKDEpznsEtfFTO4ciWL1B10RTaOfPQ5k'\n  }\n})\n","import React, {Component} from 'react';\nimport { Grid } from \"@material-ui/core\";\n\nimport {SearchBar, VideoDescription, VideoList} from './components';\nimport youtube from './api/youtubeApi';\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: null,\n  }\n\ncomponentDidMount() {\n  this.handleSubmit('edm');\n}\n\n\n  handleSubmit = async (searchTerm: any) => {\n    const response = await youtube.get('search', {\n      params: {\n        part: 'snippet',\n        maxResults: 5,\n        key: 'AIzaSyBIKDEpznsEtfFTO4ciWL1B10RTaOfPQ5k',\n        q: searchTerm,\n      }});\n      this.setState({\n        videos: response.data.items,\n        selectedVideo: response.data.items[0],\n      });\n  }\n\n  onVideoSelect = (video: any) => {\n    this.setState({\n      selectedVideo: video\n    })\n  }\n\n  render() {\n    const {videos, selectedVideo} = this.state;\n    return (\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item xs={12}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n            <SearchBar onFormSubmit={this.handleSubmit}/>\n            </Grid>\n            <Grid item xs={8}>\n              <VideoDescription video={selectedVideo}/>\n            </Grid>\n            <Grid item xs={4}>\n              <VideoList videos={videos} onVideoSelect={this.onVideoSelect}/>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}